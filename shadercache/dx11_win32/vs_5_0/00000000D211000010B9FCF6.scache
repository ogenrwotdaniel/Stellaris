#define VERTEX_SHADER
#define SHADERQUALITY_HIGH
#define PDX_DIRECTX_11

#define PDX_POSITION SV_POSITION
#define PDX_COLOR SV_TARGET

#define mod( X, Y ) ( X % Y )

#define FIX_FLIPPED_UV( X ) ( X )

float3x3 CastTo3x3( in float4x4 M )
{
	return (float3x3)M;
}
#define Create3x3 float3x3
#define GetMatrixData( Matrix, row, col ) ( Matrix [ row ] [ col ] )

float2 vec2(float vValue) { return float2(vValue, vValue); }
float3 vec3(float vValue) { return float3(vValue, vValue, vValue); }
float4 vec4(float vValue) { return float4(vValue, vValue, vValue, vValue); }


struct STextureSampler2D
{
    Texture2D 		_Texture;
    SamplerState 	_Sampler;
};
STextureSampler2D CreateSampler2D( Texture2D Texture, SamplerState Sampler )
{
    STextureSampler2D ret = { Texture, Sampler };
    return ret;
}

struct STextureSamplerCube
{
    TextureCube 	_Texture;
    SamplerState 	_Sampler;
};
STextureSamplerCube CreateSamplerCube( TextureCube Texture, SamplerState Sampler )
{
    STextureSamplerCube ret = { Texture, Sampler };
    return ret;
}

#define TextureSampler2D STextureSampler2D

#define sampler2DShadow STextureSampler2D
#define sampler2D STextureSampler2D

#define tex2D(samp,uv) samp._Texture.Sample(samp._Sampler, uv)
#define tex2Dlod(samp,uv_lod) samp._Texture.SampleLevel(samp._Sampler, (uv_lod).xy, (uv_lod).w)
#define tex2Dlod0(samp,uv_lod) samp._Texture.SampleLevel(samp._Sampler, (uv_lod).xy, 0)
#define tex2Dbias(samp,uv_bias) samp._Texture.SampleBias(samp._Sampler, (uv_bias).xy, (uv_bias).w)
#define tex2Dproj(samp,uv_proj) samp._Texture.SampleLevel(samp._Sampler, (uv_proj).xy / (uv_proj).w, 0)
#define tex2Dgrad(samp,uv,ddx,ddy) samp._Texture.SampleGrad(samp._Sampler, uv, ddx, ddy)

#define texCUBE(samp,uv) samp._Texture.Sample(samp._Sampler, uv)
#define texCUBElod(samp,uv_lod) samp._Texture.SampleLevel(samp._Sampler, (uv_lod).xyz, (uv_lod).w)
#define texCUBEbias(samp,uv_bias) samp._Texture.SampleBias(samp._Sampler, (uv_bias).xyz, (uv_bias).w)

#define uintIfSupported uint

Texture2D InfluenceVisualisationTexture_Texture : register(t0);
SamplerState InfluenceVisualisationTexture_Sampler : register(s0);
#define InfluenceVisualisationTexture CreateSampler2D(InfluenceVisualisationTexture_Texture, InfluenceVisualisationTexture_Sampler)
cbuffer dx11_cb0 : register(b0)
{
	float4x4 ViewProjectionMatrix;
	float TileSize;
	float InfluenceRange;
}
cbuffer dx11_cb1 : register(b1)
{
	float4 InfluenceFieldDatas[1000];
}
struct VS_INPUT
{
	float2 Position : POSITION;
	float2 UV : TEXCOORD0;
	float3 WorldPos : TEXCOORD1;
	float InfluenceCount : TEXCOORD2;
	int4 InfluenceDataIndices_1 : TEXCOORD3;
	int4 InfluenceDataIndices_2 : TEXCOORD4;
};
struct VS_OUTPUT
{
	float4 Position : PDX_POSITION;
	float4 ValueColor : TEXCOORD0;
};
float ApplyInfluences(int4 Indices, float InfluenceCount, float3 Pos)
		{
			float TotalInfluence = 0;
			for(int i = 0; i < int( min( InfluenceCount, 4.0f ) ); i++)
			{
				//Influence data is a float4 where: x = centerX | y = centerY | z = influence | w = visibility
				int CurrentIndex = Indices[i];
				float2 DistanceVec = InfluenceFieldDatas[CurrentIndex].xy - Pos.xz;
				float Distance = length(DistanceVec);

				if(Distance < InfluenceRange)
				{
					float Influence = InfluenceFieldDatas[CurrentIndex].z;
					float Intel = InfluenceFieldDatas[CurrentIndex].w;
					Influence = clamp(Influence,-0.9,0.9);
					TotalInfluence += Intel * Influence * (1 - (Distance  / InfluenceRange));
				}
			}

			return TotalInfluence;
		}

		VS_OUTPUT main(const VS_INPUT v )
		{
			VS_OUTPUT Out;
			float4 Pos = float4( v.Position.x,0, v.Position.y, 1.0f );
			Pos.xz *= TileSize/1.8;
			Pos.xyz += v.WorldPos;
			Out.Position = mul( ViewProjectionMatrix, Pos );

			float TotalInfluence = .0f;

			TotalInfluence += ApplyInfluences(int4(v.InfluenceDataIndices_1), v.InfluenceCount,Pos.xyz);
			TotalInfluence += ApplyInfluences(int4(v.InfluenceDataIndices_2), v.InfluenceCount - 4,Pos.xyz);

			float Value = clamp(TotalInfluence,-0.99,0.99) ;

			//faster fade based on how far they were from center
			float Alpha = abs(Value) * abs(Value) / 2;
			Alpha = min(Alpha,0.3);

			float NormalizedValue = (Value +1 )/(2);
			float2 UVs = float2(NormalizedValue,0);
			float4 TextureColor = tex2Dlod0( InfluenceVisualisationTexture, UVs );

			float4 Color = float4(TextureColor.xyz,Alpha);
			Out.ValueColor = Color;
			return Out;
		}
		
	