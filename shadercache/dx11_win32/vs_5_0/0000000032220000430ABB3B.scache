#define VERTEX_SHADER
#define SHADERQUALITY_HIGH
#define PDX_DIRECTX_11

#define PDX_POSITION SV_POSITION
#define PDX_COLOR SV_TARGET

#define mod( X, Y ) ( X % Y )

#define FIX_FLIPPED_UV( X ) ( X )

float3x3 CastTo3x3( in float4x4 M )
{
	return (float3x3)M;
}
#define Create3x3 float3x3
#define GetMatrixData( Matrix, row, col ) ( Matrix [ row ] [ col ] )

float2 vec2(float vValue) { return float2(vValue, vValue); }
float3 vec3(float vValue) { return float3(vValue, vValue, vValue); }
float4 vec4(float vValue) { return float4(vValue, vValue, vValue, vValue); }


struct STextureSampler2D
{
    Texture2D 		_Texture;
    SamplerState 	_Sampler;
};
STextureSampler2D CreateSampler2D( Texture2D Texture, SamplerState Sampler )
{
    STextureSampler2D ret = { Texture, Sampler };
    return ret;
}

struct STextureSamplerCube
{
    TextureCube 	_Texture;
    SamplerState 	_Sampler;
};
STextureSamplerCube CreateSamplerCube( TextureCube Texture, SamplerState Sampler )
{
    STextureSamplerCube ret = { Texture, Sampler };
    return ret;
}

#define TextureSampler2D STextureSampler2D

#define sampler2DShadow STextureSampler2D
#define sampler2D STextureSampler2D

#define tex2D(samp,uv) samp._Texture.Sample(samp._Sampler, uv)
#define tex2Dlod(samp,uv_lod) samp._Texture.SampleLevel(samp._Sampler, (uv_lod).xy, (uv_lod).w)
#define tex2Dlod0(samp,uv_lod) samp._Texture.SampleLevel(samp._Sampler, (uv_lod).xy, 0)
#define tex2Dbias(samp,uv_bias) samp._Texture.SampleBias(samp._Sampler, (uv_bias).xy, (uv_bias).w)
#define tex2Dproj(samp,uv_proj) samp._Texture.SampleLevel(samp._Sampler, (uv_proj).xy / (uv_proj).w, 0)
#define tex2Dgrad(samp,uv,ddx,ddy) samp._Texture.SampleGrad(samp._Sampler, uv, ddx, ddy)

#define texCUBE(samp,uv) samp._Texture.Sample(samp._Sampler, uv)
#define texCUBElod(samp,uv_lod) samp._Texture.SampleLevel(samp._Sampler, (uv_lod).xyz, (uv_lod).w)
#define texCUBEbias(samp,uv_bias) samp._Texture.SampleBias(samp._Sampler, (uv_bias).xyz, (uv_bias).w)

#define uintIfSupported uint

cbuffer dx11_cb0 : register(b0)
{
	float4x4 ViewProjectionMatrix;
	float2 LightningUvScale;
}
struct VS_INPUT
{
	float2 vPosition : POSITION;
	float2 vUV : TEXCOORD0;
	float3 iPosition : TEXCOORD1;
	float iSize : TEXCOORD2;
	float iRot : TEXCOORD3;
	float iCounterRotation : TEXCOORD4;
	float iOpacity : TEXCOORD5;
	float iLightningIntencity : TEXCOORD6;
	float2 iLightningUvOffset : TEXCOORD7;
};
struct VS_OUTPUT
{
	float4 vPosition : PDX_POSITION;
	float2 vUV : TEXCOORD0;
	float2 vPos : TEXCOORD1;
	float4 vScreenCoord : TEXCOORD2;
	float vOpacity : TEXCOORD3;
	float vLightningIntencity : TEXCOORD4;
	float2 vColorUV : TEXCOORD5;
	float2 vLightningUV : TEXCOORD6;
};
// --------------------------------------------------------------
// ------------------    Light          -------------------------
// --------------------------------------------------------------
static const float3 SUN_DIFFUSE					= float3( 0.226f, 0.182f, 0.36f );


// --------------------------------------------------------------
// ------------------    HDR          	-------------------------
// --------------------------------------------------------------
static const float3 LUMINANCE_VECTOR  			= float3(0.2125f, 0.7154f, 0.0721f);


// --------------------------------------------------------------
// ------------------    Specular       -------------------------
// --------------------------------------------------------------
static const float SPECULAR_WIDTH 				= 15.0f;
static const float SPECULAR_MULTIPLIER			= 1.0f;
static const float MAP_SPECULAR_WIDTH 			= 15.0f;
static const float MAP_SPECULAR_MULTIPLIER		= 0.05f;


// --------------------------------------------------------------
// ------------------       ROADS       -------------------------
// --------------------------------------------------------------
static const float ROAD_TILE_FREQ				= 16.0f;
static const float ROAD_FADE_START				= 1.0f;
static const float ROAD_FADE_END				= 4.0f;

static const float ROAD_MAXIMAP_TILE_FREQ		= 30.f;
static const float ROAD_MAXIMAP_EXTRA_WIDTH		= 0.3f;

static const float ROAD_MINIMAP_TILE_FREQ		= 15.f;
static const float ROAD_MINIMAP_EXTRA_WIDTH		= 0.0f;


// --------------------------------------------------------------
// ------------------       COMBAT       ------------------------
// --------------------------------------------------------------
static const float COMBAT_OUTSIDE_BOUNDS_BRIGHTNESS	= 0.45f;
static const float COMBAT_INSIDE_BOUNDS_BRIGHTNESS	= 0.99f;
static const float COMBAT_BOUNDS_SHARPNESS 			= 0.1f;
static const float COMBAT_BOUNDS_BORDER_SHARPNESS	= 3.0f;


// --------------------------------------------------------------
// ------------------    WATER          -------------------------
// --------------------------------------------------------------
static const float 	WATER_TILE					= 1.8f;
static const float 	WATER_TIME_SCALE			= 0.03f;
static const float	WATER_FOG_START				= 16.5f;
static const float	WATER_FOG_END				= 19.7f;

static const float WATER_HEIGHT 				= 20.0f;
static const float WATER_HEIGHT_RECP 			= 1.0f / WATER_HEIGHT;
static const float WATER_HEIGHT_RECP_SQUARED 	= WATER_HEIGHT_RECP * WATER_HEIGHT_RECP;

static const float HEL_WATER_SCALE				= 1.2f;
static const float HEL_WATER_SPEED 				= 0.03f;
static const float HEL_WATER_GLOW_NOISE_SPEED	= 0.08f;
static const float HEL_WATER_GLOW_NOISE_SCALE   = 0.006f;


// --------------------------------------------------------------
// ------------------    SHADOW         -------------------------
// --------------------------------------------------------------
static const float  SHADOW_WEIGHT_TERRAIN    	= 1.0f;
static const float  SHADOW_WEIGHT_WATER   		= 1.0f;
static const float  SHADOW_WEIGHT_RIVER   		= 1.0f;
static const float  SHADOW_WEIGHT_TREE   		= 1.0f;
static const float  SHADOW_WEIGHT_ROAD   		= 1.0f;
static const float  SHADOW_WEIGHT_MESH   		= 1.0f;

// --------------------------------------------------------------
// -------------    RIM LIGHT (PDXMESH)   -----------------------
// --------------------------------------------------------------
static const float 	RIM_START 		= 0.6f;
static const float 	RIM_END 		= 1.0f;
static const float4 RIM_COLOR 		= float4( 0.3f, 0.6f, 0.8f, 0.0f );

// --------------------------------------------------------------
// -------------    GREYING OUT   -------------------------------
// --------------------------------------------------------------
static const float3 GREY_OUT_VECTOR     = float3( 0.212671f, 0.715160f, 0.072169f );
static const float GREY_OUT_GREYNESS    = 0.85f;    // [0.0f, 1.0f] 0.0f - the tint is not changed, 1.0f - the tint is completely removed
static const float GREY_OUT_BRIGHTNESS  = 0.75;     // [0.0f, 1.0f] 0.0f - completely black, 1.0f - the same brighnes as before graying out

VS_OUTPUT main(const VS_INPUT v )
		{
			VS_OUTPUT Out;

			float4 VertexPos = float4( v.vPosition.x, 0.0, v.vPosition.y, 1.0 );	
			VertexPos.xz *= v.iSize;

#ifdef PDX_OPENGL
			float Rotation = -v.iRot;
#else
			float Rotation = v.iRot;
#endif

			float StraightSin = sin( Rotation );
			float StraightCos = cos( Rotation );

			float2x2 RotationMx = float2x2(
				StraightCos, -StraightSin, 
				StraightSin, StraightCos );
			
			VertexPos.xz = mul( VertexPos.xz, RotationMx );
			VertexPos.xyz += v.iPosition;
			
			Out.vPosition = mul( ViewProjectionMatrix, VertexPos );
			Out.vUV	= v.vUV;
			Out.vPos = VertexPos.xz;

			Out.vScreenCoord.x = ( Out.vPosition.x * 0.5 + Out.vPosition.w * 0.5 );
			Out.vScreenCoord.y = ( Out.vPosition.w * 0.5 - Out.vPosition.y * 0.5 );
		#ifdef PDX_OPENGL
			Out.vScreenCoord.y = -Out.vScreenCoord.y;
		#endif	
			Out.vScreenCoord.z = Out.vPosition.w;
			Out.vScreenCoord.w = Out.vPosition.w;

			Out.vOpacity = v.iOpacity;
			Out.vLightningIntencity = v.iLightningIntencity;

			// Negating the rotation of lightning texure 
			// (the same rotation matrix is used because of different orientation of UV vectors)
			Out.vLightningUV = v.vUV - 0.5;
			Out.vLightningUV *= LightningUvScale;
			Out.vLightningUV = mul( RotationMx, Out.vLightningUV );
			Out.vLightningUV += LightningUvScale * 0.5;
			Out.vLightningUV += v.iLightningUvOffset;

		#ifdef PDX_OPENGL
			float CounterRotation = Rotation + v.iCounterRotation;
		#else
			float CounterRotation = Rotation - v.iCounterRotation;
		#endif

			float CounterSin = sin( CounterRotation );
			float CounterCos = cos( CounterRotation );

			float2x2 CounterRotationMx = float2x2(
				CounterCos, -CounterSin,
				CounterSin, CounterCos );

			// Rotating the color UV in opposite direction
			Out.vColorUV = v.vUV - 0.5;
			Out.vColorUV = mul( CounterRotationMx, Out.vColorUV );
			Out.vColorUV = Out.vColorUV + 0.5;

			return Out;
		}
		
	